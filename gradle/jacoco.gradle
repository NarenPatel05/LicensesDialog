apply plugin: 'jacoco'

jacoco {
    toolVersion = "0.7.9"
}

android {
    testOptions {
        unitTests.all {
            jacoco {
                includeNoLocationClasses = true
                excludes = ['**/R.class',
                            '**/R$*.class',
                            '**/*$ViewInjector*.*',
                            '**/*$ViewBinder*.*',
                            '**/BuildConfig.*',
                            '**/Manifest*.*',
                            '**/*$Lambda$*.*', // Jacoco can not handle several "$" in class name.
                            '**/*Module.*', // Modules for Dagger.
                            '**/*Dagger*.*', // Dagger auto-generated code.
                            '**/*MembersInjector*.*', // Dagger auto-generated code.
                            '**/*_Provide*Factory*.*',
                            '**/*_Factory.*', //Dagger auto-generated code
                            '**/*$*$*.*', // Anonymous classes generated by kotlin
                            'android/**/*.*',
                            'rx/android/**/*.*',
                            'com/steadystate/css/**/*.*',
                            'com/nineoldandroids/**/*.*',
                            'com/bluejamesbond/text/**/*.*',
                            'com/radaee/**/*.*',
                            'uk/co/senab/**/*.*',
                ]
            }
        }
    }
}

project.afterEvaluate {
    //Gather build type and product flavor names in a list
    final buildTypes = android.buildTypes.collect { final type -> type.name }
    final productFlavors = android.productFlavors.collect { final flavor -> flavor.name }
    if (!productFlavors) productFlavors.add('')

    productFlavors.each { final productFlavorName ->
        buildTypes.each { final buildTypeName ->

            //Define the sourceName and the sourcePath.
            def sourceName, sourcePath
            if (!productFlavorName) {
                sourceName = sourcePath = "${buildTypeName}"
            } else {
                sourceName = "${productFlavorName}${buildTypeName.capitalize()}"
                sourcePath = "${productFlavorName}/${buildTypeName}"
            }

            final def testTaskName = "test${sourceName.capitalize()}UnitTest"

            //noinspection GroovyAssignabilityCheck
            task "create${sourceName.capitalize()}UnitTestCoverageReport"(type: JacocoReport, dependsOn: "$testTaskName") {

                group = "Reporting"
                description =
                        "Generate Jacoco coverage reports on the ${sourceName.capitalize()} build."

                //Directory where the compiled class files are
                classDirectories =
                        fileTree(dir: "${project.buildDir}/intermediates/classes/${sourcePath}",
                                excludes: ['**/R.class',
                                           '**/R$*.class',
                                           '**/*$ViewInjector*.*',
                                           '**/*$ViewBinder*.*',
                                           '**/BuildConfig.*',
                                           '**/Manifest*.*',
                                           '**/*$Lambda$*.*', // Jacoco can not handle several "$" in class name.
                                           '**/*Module.*', // Modules for Dagger.
                                           '**/*Dagger*.*', // Dagger auto-generated code.
                                           '**/*MembersInjector*.*', // Dagger auto-generated code.
                                           '**/*_Provide*Factory*.*',
                                           '**/*_Factory.*', //Dagger auto-generated code
                                           '**/*$*$*.*' // Anonymous classes generated by kotlin
                                ])

                sourceDirectories = files(["src/main/java",
                                           "src/$productFlavorName/java",
                                           "src/$buildTypeName/java"])

                executionData = files("${project.buildDir}/jacoco/${testTaskName}.exec")

                reports {
                    xml.enabled = true
                    html.enabled = true
                }
            }
        }
    }
}